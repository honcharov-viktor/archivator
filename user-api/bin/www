#!/usr/bin/env node
'use strict';

const http = require('http');
const {createTerminus, HealthCheckError} = require('@godaddy/terminus');
const logger = require('../helpers/logger');

const app = require('../app');
const config = require('../config');

const port = config.port;
app.set('port', port);

const server = http.createServer(app);

const mongodb = require('../db/mongodb');
const s3Client = require('../db/s3Client');

function onSignal () {
  logger.info('Starting signal cleanup');
  return Promise.all([mongodb.disconnect()]);
}

async function onHealthCheck () {
  return Promise.all([mongodb.isConnected(), s3Client.isConnected()])
    .catch((err) => {
      throw new HealthCheckError('healthcheck failed', err);
    });
}


const terminusOptions = {
  timeout: 5000,
  healthChecks: {
    '/healthz/liveness': (() => Promise.resolve()),
    '/healthz/readiness': onHealthCheck,
  },
  onSignal,
  logger: ((msg, err) => {logger.error(msg, err.causes)})
};

createTerminus(server, terminusOptions);
// --------------------------

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }
  const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      logger.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      logger.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onListening() {
  logger.info(`Server started on port ${port} (${config.env})`)
}

module.exports = server;
